
<markdown>

## Libraries

	#include<iostream>
	#include<iomanip>
	#include<fstream>

## Makefile
	
	PROG = 11631

	${PROG}: ${PROG}.cpp
		g++ -Wall -lm -lcrypt -O2 -o ${PROG} ${PROG}.cpp

	test: 
		./${PROG} < in
	
	all: ${PROG} test

## I/O

	using namespace std;

	std::getline(inf, jersey_number, '|'); #read thru pipe
	std::getline(inf, best_time);          #read thru newline

	std::cout.fill('X');
	std::cout << setw(2) << one << std::endl.;

	std::cout.setf(std::ios::fixed, std::ios::floatfield);
	std::cout.setf(std::ios::showpoint);
	std::cout.precision(2);

## STL

* Vector, Lists, Sets, Stack, Queue, Priority_Queue, Heap, Map, MultiMap....
* *Vector*: push_back, pop_back, size, capacity, resize, front, back, clear	
* *queue*: front, back, push, pop
* *Algorithms*: sort, lower_bound, upper_bound, equal_range, binary_search, max, min, max_element, next_permutation, etc


## Coding style
	while while ((scanf scanf( %d , ("%d", n), n)  {  // read  input  + do value test together n), n) { … // read input + do value test together
	while (scanf("%d", n) != EOF) { … // read input and do EOF test

	isalpha (ctype.h)
	inline bool isletter(char c) { return (c>='A'&&c<='Z')||(c>='a'&&c<='z'); }
	abs (math.h)
	inline int abs(int a) { return a >= 0 ? a : -a; }
	pow (math.h)
	int int power( power(int int aa, int int b)b) {{
	int res=1; for (; b>=1; b--) res*=a; return res; }

## Graphs

### DFS

* O(V + E) if using Adjacency List
* O(V^2) if using Adjac
        
### BFS

	1. Enqueue the root node
	2. Dequeue a node and examine it
		* If the element sought is found in this node, quit the search and return a result.
		* Otherwise enqueue any successors (the direct child nodes) that have not yet been discovered.
	3. If the queue is empty, every node on the graph has been examined – quit the search and return "not found".
	4. If the queue is not empty, repeat from Step 2.
	Note: Using a stack instead of a queue would turn this algorithm into a depth-first search.


	1  procedure BFS(G,v):
	2      create a queue Q
	3      enqueue v onto Q
	4      mark v
	5      while Q is not empty:
	6          t ← Q.dequeue()
	7          if t is what we are looking for:
	8              return t
	9          for all edges e in G.incidentEdges(t) do
	10             o ← G.opposite(t,e)
	11             if o is not marked:
	12                  mark o
	13                  enqueue o onto Q
	
	

	#define vi (vector<int>)
	#define tr(c,i) for(vi::iterator i = (c).begin(); i != (c).end(); i++)ency Matrix

	int dfs(vi& g, int a){
		int u, v;
		stack<int> s;
		vector<bool> vis(g.size(), false);
		s.push(a);
		vis[a] = true;
		
		while(!s.empty()){
			u = s.top(); s.pop();
			tr(g[u],it){
				if (!vis[ v = g[u][i] ]){
					vis[v] = true;
					vis.push(v);
				}
			}
		}
	
	}
	
	int bfs(vi& g, int a){
		int u, v;
		queue<int> q;
		vector<bool> vis(g.size(), false);
		s.push(a);
		vis[a] = true;
		
		while(!s.empty()){
			u = s.front(); s.pop();
			tr(g[u],it){
				if (!vis[ v = *it ]){
					vis[v] = true;
					vis.push(v);
				}
			}
		}
	
	}
	
### Connected Components

* DFS (and BFS) can find connected components: A call of dfs((u)) visits only vertices connected to u

### Topological sorting

#### Algo 1 (from start)

	L ← Empty list that will contain the sorted elements
	S ← Set of all nodes with no incoming edges
	while S is non-empty do
		remove a node n from S
		insert n into L
		for each node m with an edge e from n to m do
		    remove edge e from the graph
		    if m has no other incoming edges then
		        insert m into S
	if graph has edges then
		return error (graph has at least one cycle)
	else 
		return L (a topologically sorted order)
    

#### Algo 2 (from end)
    
	L ← Empty list that will contain the sorted nodes
	S ← Set of all nodes with no outgoing edges
	for each node n in S do
		visit(n) 
	function visit(node n)
		if n has not been visited yet then
		    mark n as visited
		    for each node m with an edge from m to n do
		        visit(m)
		    add n to L
        
        


### Eulerian Cycle

Walk on the graph edges of a graph which uses each graph edge in the original graph exactly once.

### Hamiltonian Cycle

A Hamiltonian cycle is a graph cycle (i.e., closed loop) through a graph that visits each node exactly once.

### Prim & Dijkstra

#### Prim 

Greedy algorithm that finds a minimum spanning tree for a connected weighted undirected graph
adjacency matrix, searching:	O(V2);
binary heap and adjacency list:	O((V + E) log V) = O(E log V);
Fibonacci heap and adjacency list:	O(E + V log V);

#### Dijkstra 

Solves the single-source shortest path problem for a graph with nonnegative edge path costs, producing a shortest path tree

	Let the node at which we are starting be called the initial node. Let the distance of node Y be the distance from the initial node to Y. Dijkstra's algorithm will assign some initial distance values and will try to improve them step by step.
	1. Assign to every node a tentative distance value: set it to zero for our initial node and to infinity for all other nodes.
	2. Mark all nodes unvisited. Set the initial node as current. Create a set of the unvisited nodes called the unvisited set consisting of all the nodes except the initial node.
	3. For the current node, consider all of its unvisited neighbors and calculate their tentative distances. For example, if the current node A is marked with a tentative distance of 6, and the edge connecting it with a neighbor B has length 2, then the distance to B (through A) will be 6+2=8. If this distance is less than the previously recorded tentative distance of B, then overwrite that distance. Even though a neighbor has been examined, it is not marked as visited at this time, and it remains in the unvisited set.
	4. When we are done considering all of the neighbors of the current node, mark the current node as visited and remove it from the unvisited set. A visited node will never be checked again; its distance recorded now is final and minimal.
	5. If the destination node has been marked visited (when planning a route between two specific nodes) or if the smallest tentative distance among the nodes in the unvisited set is infinity (when planning a complete traversal), then stop. The algorithm has finished.
	6. Set the unvisited node marked with the smallest tentative distance as the next "current node" and go back to step 3.

#### Algorithm

	vector<vector< pair<int, int> > > g; //(adjacent node, weight)
	
	#define edge(i, j, w) (g[i].pb(mp(j, w)); g[j].pb(mp(i, w));)

	inline int prim(){
		int ret = 0, v, w;
		priority_queue< pair<int, int>, vector< pair<int, int> >, greater< pair<int, int> > > q;
		vector<bool> vis(m, false);

		pair<int, int> p;
		q.push( make_pair(0,0) );
		while (!q.empty()){
			p=q.top(); q.pop();
			v = p.second; //vertice
			w = p.first; //peso da aresta
			if (vis[v]) continue;
			vis[v] = true;
			ret += w;

			for (unsigned int i = g[v].size(); i--; )
			if ( !vis[ g[v][i].first ] ) {
				q.push(make_pair( g[v][i].second, g[v][i].first )); //peso, 
			}
		}
		return ret;
	}
	
	inline int prim(){
		int ret = 0, v, w;
		priority_queue< ii, vii, greater< ii > > q;
		vector<bool> vis(m, false);

		ii p;
		q.push( mp(0,0) );
		while (!q.empty()){
			p=q.top(); q.pop();
			v = p.second; //vertice
			w = p.first; //peso da aresta
			if (vis[v]) continue;
			vis[v] = true;
			ret += w;
			tr(g[v], i){
				int t = i->first;
				if ( !vis[t] ) {
					q.push(make_pair( i->second, t )); //peso, 
				}
			}
		}
		return ret;
	}



	int dijkstra(int a, int b){
		priority_queue< pair<int, int>, vector< pair<int, int> >, greater< pair<int, int> > > q;
		vector< int > d(g.size(), -1); //usa distancia!!!!!!!!

		pair<int, int> p; int v, w;
		q.push( make_pair(0,a) );
		while (!q.empty()){
			p=q.top(); q.pop();
			v = p.second; //vertice
			w = p.first; //peso da aresta
			if ( d[v] != -1 ) continue;
			if (v == b) return w;
			d[v] = w;

			for (unsigned int i = g[v].size(); i--; )
				if ( d[ g[v][i].first ] == -1 ) {
					q.push(make_pair( w+g[v][i].second, g[v][i].first )); //peso, 
				}
		}
		return -1;
	}
	
	vector< vii > g;
	#define edge(i, j, w) (g[i].pb(mp(j, w)); g[j].pb(mp(i, w));)
	
	int dijkstra(int a, int b = -1){
		priority_queue< ii, vii, greater< ii > > q;
		vi d(g.size(), -1);

		ii p; int v, w;
		q.push( mp(0,a) );
		while (!q.empty()){
			p=q.top(); q.pop();
			v = p.second; //vertice
			w = p.first; //peso da aresta
			if ( d[v] != -1 ) continue;
			if (v == b) return w;
			d[v] = w;
			tr(g[v], i){
				if ( d[ i->first ] == -1 ) {
					q.push(mp( w+i->second, i->first )); //peso, 
				}
			}
		}
		return -1;
	}
	
	vector< vii > g;
	vi prev;
	int dijkstra(vector< vii > &g, int a, int b = -1){ //dijkstra with path
		priority_queue< pair<int, ii>, vector< pair<int, ii> >, greater< pair<int, ii> > > q;
		vi d(g.size(), -1);
		//vi prev;
		prev.clear();
		prev.assign(g.size(), -1);

		pair<int, ii> p; int v, w;
		q.push( mp(0, mp(-1, a)) );
		while (!q.empty()){
			p=q.top(); q.pop();
			v = p.second.second; //vertice
			w = p.first; //peso da aresta
			if ( d[v] != -1 ) continue;
			if (v == b) return w;
			d[v] = w;
			prev[v] = p.second.first;
			tr(g[v], it){
				int t = it->first;
				if ( d[t] == -1 ) {
					q.push(mp( w+it->second, mp(v, t) )); //peso, 
				}
			}
		}
		return -1;
	}
	
	int bellman_ford(int a){
		vector< int > d(sz, INT_MAX);// Step 1: initialize graph
		vector< int > prior(sz, -1);
		int v, w;
		d[a] = 0;
		for (int i=n; i--;){// Step 2: relax edges repeatedly
			for (int j=g[i].size(); j--;){
				v = g[i][j].first;
				w = g[i][j].second;
				if (d[v] > d[i] + w){
					d[v] = d[i] + w;
					prior[v] = i;
				}
			}
		}
	
		for (int i=n; i--;){// Step 3: check for negative-weight cycles
			for (int j=g[i].size(); j--;){
				int v = g[i][j].first;
				if (d[v] < d[i] + d[g[i][j].second])
					return -2; //"Graph contains a negative-weight cycle"
			}
		}
	
	}
	
### Floyd–Warshall O(V^3)

	 1 /* Assume a function edgeCost(i,j) which returns the cost of the edge from i to j
	 2    (infinity if there is none).
	 3    Also assume that n is the number of vertices and edgeCost(i,i) = 0
	 4 */
	 5
	 6 int path[][];
	 7 /* A 2-dimensional matrix. At each step in the algorithm, path[i][j] is the shortest path
	 8    from i to j using intermediate vertices (1..k−1).  Each path[i][j] is initialized to
	 9    edgeCost(i,j).
	10 */
	11
	12 procedure FloydWarshall ()
	13    for k := 1 to n
	14       for i := 1 to n
	15          for j := 1 to n
	16             path[i][j] = min ( path[i][j], path[i][k]+path[k][j] );


### A*

Used in pathfinding and graph traversal

## Knapsack

	for w from 0 to W do
	  T[0, w] := 0
	end for

	for i from 1 to n do
	  for j from 0 to W do
		if j >= w[i] then
		  T[i, j] := max(T[i-1, j], T[i-1, j-w[i]] + v[i])
		else
		  T[i, j] := T[i-1, j]
		end if
	  end for
	end for
	
## LCS

	function LCSLength(X[1..m], Y[1..n])
		C = array(0..m, 0..n)
		for i := 0..m
		   C[i,0] = 0
		for j := 0..n
		   C[0,j] = 0
		for i := 1..m
			for j := 1..n
				if X[i] = Y[j]
				    C[i,j] := C[i-1,j-1] + 1
				else:
				    C[i,j] := max(C[i,j-1], C[i-1,j])
		return C[m,n]
		
	function backtrack(C[0..m,0..n], X[1..m], Y[1..n], i, j)
		if i = 0 or j = 0
		    return ""
		else if  X[i] = Y[j]
		    return backtrack(C, X, Y, i-1, j-1) + X[i]
		else
		    if C[i,j-1] > C[i-1,j]
		        return backtrack(C, X, Y, i, j-1)
		    else
		        return backtrack(C, X, Y, i-1, j)
		        
### Reduce Problem Set

	function LCS(X[1..m], Y[1..n])
		start := 1
		m_end := m
		n_end := n
		trim off the matching items at the beginning
		while start ≤ m_end and start ≤ n_end and X[start] = Y[start]
		    start := start + 1
		trim off the matching items at the end
		while start ≤ m_end and start ≤ n_end and X[m_end] = Y[n_end]
		    m_end := m_end - 1
		    n_end := n_end - 1
		C = array(start-1..m_end, start-1..n_end)
		only loop over the items that have changed
		for i := start..m_end
		    for j := start..n_end
		        the algorithm continues as before ...

### Reduce strings to hashes or Reduce the required space

## Math

### GCD

	int gcd(int a, int b) {
		if (b == 0)
			return a;
		return gcd(b, a % b);
	}
	
### Primes Numbers

Greatest prime that fits in a 32 bits int: (1<<31) - 1
	
Test only odd numbers up to sqrt(n)
	
	set<int> primes;
	int is_prime(int num){
		if (num<1200)
			return primes.find(num) != primes.end();
		set<int>::iterator it;
		int sq = sqrt(num);
		for (it=primes.begin(); *it<=sq && it!=primes.end(); it++){
			if (!(num % *it))
				return false;
		}
		return true;
	}

### LCM

Least Common multiple

lcm(x,y) >= max(x,y)
lcm(x,y) <= x*y
lcm(x,y) = x*y/gcd(x,y)

### Fibonacci

	if (n%2){
		v = n/2 + 1;
		unsigned long long int ta=fibo(v-1, mod)%mod, tb=fibo(v, mod)%mod, 
		ret = ((ta*ta%mod)+(tb*tb%mod))%mod;
		//fibcache[n] = ret; 
		return ret;
	} else {
		v = n/2;
		unsigned long long int ta=(2*fibo(v-1, mod))%mod, tb=fibo(v, mod)%mod, 
		ret = (((ta+tb)%mod)*tb)%mod;
		//fibcache[n] = ret; 
		return ret;
	}

### Polar coordinate system

	x = r cos o
	y = r sen o
	r = sqrt(x^2 + y^2)
	o = arctan(y, x)
	
### LatlongDistance


	#define pi 3.14159265358979323846264
	#define toRad(x) ((x)*pi/180.0)

	double LatlongDistance(double lat1, double lon1, double lat2, double lon2){
		double R = 6371.0; // km
		double dLat = toRad(lat2-lat1);
		double dLon = toRad(lon2-lon1);
		lat1 = toRad(lat1);
		lat2 = toRad(lat2);

		double a = sin(dLat/2) * sin(dLat/2) +
	       		sin(dLon/2) * sin(dLon/2) * cos(lat1) * cos(lat2); 
		double c = 2 * atan2(sqrt(a), sqrt(1-a)); 
		return R * c;
	}

### Modular arithmetics

	(x + y) mod n = ((x mod n) + (y mod n)) mod n
	x*y mod n = (x mod n) * (y mod n) mod n
	x^y mod n = (x mod n)^y mod n
	float(sqrt(n)) == ceil(sqrt(n))

### Stern-Brocot tree

### Recurrence

	a_n = a_{n-1} + 1, a_1 = 1 -> a_n = n
	a_n = 2*a_{n-1}, a_1 = 2 -> a_n = 2^n
	a_n = n*a_{n-1}, a_1 = 1 -> a_n = n!
	C_n = \sum^{n-1}_{k=0} C_k*C_{n-1-k}

## Geometry

	struct Point {
		T1 x;
		T1 y;
		Point(T1 x1, T1 y1): x(x1), y(y1) { }
		Point(){x = INF; y = INF;}
		bool operator <( const Point<T1>& p2 ) const{
			if (x<p2.x)
				return true;
			else if (x==p2.x)
				return y<p2.y;
			else
				return false;
		}
		inline double slope( const Point<T1>& p2 ) const{
			if ((x-p2.x) == 0)
				return INFINITY;
			return (y-p2.y)/(x-p2.x);
		}
		inline double distance(const Point<T1> &p1) const{
			return sqrt(pow(p1.x-x, 2) + pow(p1.y-y, 2));
		}
	};
	template<class T1>
	std::ostream& operator<<(std::ostream& stream, 
		             const Point<T1>& p) {
	   stream << "(" << p.x << "," << p.y << ")";
	    return stream;
	 }

	template<class T1>
	struct Line {
		T1 a; /* x-coefficient */
		T1 b; /* y-coefficient */
		T1 c; /* constant term */
		Line(const Point<T1> &p1, const Point<T1> &p2){ //two points to line
			if (p1.x == p2.x) {
				a = 1;
				b = 0;
				c = -p1.x;
			} else {
				b = 1;
				a = -(p1.y-p2.y)/(p1.x-p2.x);
				c = -(a*p1.x) - (b*p1.y);
			}
		}
		Line(const Point<T1> &p1, double m){ //point and slope to line
			a = -m;
			b = 1;
			c = -((a*p1.x) + (b*p.y));
		}
		Line (){}
		int insideLine(const Point<T1> &p){
			return 
				a*p.x +
				b*p.y +
				c
				== 0;
		}
		bool parallel(Line &l2){
			return (fabs(a-l2.a)<= EPSILON) && (fabs(b-l2.b)<= EPSILON);
		}
		bool same(Line &l2){
			return this->parallel(l2) && (fabs(c-l2.c) <= EPSILON);
		}
		//Line intersection ????
		//Closest point2
		
	};
	
	template<class T>
	double signed_triangle_area(Point<T> a, Point<T> b, Point<T> c){
		return( (a.x*b.y - a.y*b.x + a.y*c.x - a.x*c.y + b.x*c.y - c.x*b.y) / 2.0 );
	}
	double triangle_area(Point<T> a, Point<T> b, Point<T> c){
		return( fabs(signed_triangle_area(a,b,c)) );
	}

	template<class T>
	bool collinear(Point<T> a, Point<T> b, Point<T> c) {
		return (fabs(signed_triangle_area(a,b,c)) <= EPSILON);
	}

	/*
	# Three points are a counter-clockwise turn if ccw > 0, clockwise if
	# ccw < 0, and collinear if ccw = 0 because ccw is a determinant that
	# gives the signed area of the triangle formed by p1, p2 and p3.*/
	inline double ccw(const Point<int> &p1, const Point<int> &p2, const Point<int> &p3){
	    return (double)(p2.x - p1.x)*(p3.y - p1.y) - (p2.y - p1.y)*(p3.x - p1.x);
	}
	    
	struct hull_comparator {
	  Point<int> r; //reference point
	  hull_comparator(const Point<int> &_r) : r(_r) {}
	  int operator()(const Point<int> &a, const Point<int> &b) {
		double v = ccw(r,a,b);
		if (v==0)
			if (r.distance(a) <= r.distance(b))
				return false;
			else
				return true;
		else if (v>0)
			return false;
		else
			return true;
	  }
	};
	    
	vector<Point<int> > hul;

	double grahamScan(vector<Point<int> > &points){
		int n = sz(points);
		//vector<Point<int> > hul;
		if (n<=1){
			return 0;
		} else if (n==2){
			return points.at(0).distance(points.at(1))*2;
		} else if (n==3){
			return points.at(0).distance(points.at(1))+points.at(1).distance(points.at(2))+points.at(0).distance(points.at(2));
		} else {
			hul.clear();
			sort(all(points));//WATCH(points);
			sort(points.begin()+1, points.end(), hull_comparator(points[0]));//WATCH(points);
			hul.pb(points[0]);
			hul.pb(points[1]);
			hul.pb(points[2]);
			for (int i=3; i<n; ++i){
				while (true){
					assert(sz(hul)>=2);
					if (ccw(*(hul.end()-2), *(hul.end()-1), points[i])>0)//positivo sai
						hul.pop_back();
					else {
						hul.pb(points[i]);
						break;
					}
				}
			}
			double sizeh = hul.begin()->distance(*(hul.end()-1));
			if (sz(hul)>2) tr1(hul, it){
				sizeh += it->distance(*(it+1));
			}
			return sizeh;
		}
	}
	
	#define DIMENSION 2 /* dimension of points */
	#define X		 0 /* x-coordinate index */
	#define Y	 	 1 /* y-coordinate index */
	typedef double point[DIMENSION];
	#define MAXPOLY		 200/* maximum number of points in a polygon */
	typedef struct {
		int n;		 	 /* number of points in polygon */
		point  p[MAXPOLY]; /* array of points in polygon */
	} polygon;
	typedef struct {
		point  p1,p2;		 /* endpoints of line segment */
	} segment;
	typedef point triangle[3]; /* triangle datatype */
	typedef struct {
		int n;		 	 /* number of triangles in triangulation */
		int t[MAXPOLY][3]; /* indicies of vertices in triangulation */
	} triangulation;
	
	bool point_in_box(point p, point b1, point b2) {
		return( (p[X] >= min(b1[X],b2[X])) && (p[X] <= max(b1[X],b2[X]))
		 	 &&  (p[Y]  >=  min(b1[Y],b2[Y]))  &&  (p[Y]  <=  max(b1[Y],b2[Y]))  );
	}
	bool segments_intersect(segment s1, segment s2) {
		line  l1,l2;	 	 /* lines containing the input segments */
		point  p;	 	 /* intersection point */
		   points_to_line(s1.p1,s1.p2,&l1);
		points_to_line(s2.p1,s2.p2,&l2);
		if (same_lineQ(l1,l2))  /* overlapping or disjoint segments */
			 	 return( point_in_box(s1.p1,s2.p1,s2.p2) ||
			 	 	 point_in_box(s1.p2,s2.p1,s2.p2)  ||
					point_in_box(s2.p1,s1.p1,s1.p2)  ||
					point_in_box(s2.p1,s1.p1,s1.p2)  );
		if (parallelQ(l1,l2)) return(FALSE);
		intersection_point(l1,l2,p);
		return( point_in_box(p,s1.p1,s1.p2) && point_in_box(p,s2.p1,s2.p2) );
	}

## printf format

	%[flags][width][.precision][length]specifier 

	specifier	Output	Example
	c	Character	a
	d or i	Signed decimal integer	392
	e	Scientific notation (mantissa/exponent) using e character	3.9265e+2
	E	Scientific notation (mantissa/exponent) using E character	3.9265E+2
	f	Decimal floating point	392.65
	g	Use the shorter of %e or %f	392.65
	G	Use the shorter of %E or %f	392.65
	o	Unsigned octal	610
	s	String of characters	sample
	u	Unsigned decimal integer	7235
	x	Unsigned hexadecimal integer	7fa
	X	Unsigned hexadecimal integer (capital letters)	7FA
	p	Pointer address	B800:0000
	n	Nothing printed. The argument must be a pointer to a signed int, where the number of characters written so far is stored.	
	%	A % followed by another % character will write % to stdout.	%

	The tag can also contain flags, width, .precision and length sub-specifiers, which are optional and follow these specifications:

	flags	description
	-	Left-justify within the given field width; Right justification is the default (see width sub-specifier).
	+	Forces to precede the result with a plus or minus sign (+ or -) even for positive numbers. By default, only negative numbers are preceded with a - sign.
	(space)	If no sign is going to be written, a blank space is inserted before the value.
	#	Used with o, x or X specifiers the value is preceeded with 0, 0x or 0X respectively for values different than zero.
	Used with e, E and f, it forces the written output to contain a decimal point even if no digits would follow. By default, if no digits follow, no decimal point is written.
	Used with g or G the result is the same as with e or E but trailing zeros are not removed.
	0	Left-pads the number with zeroes (0) instead of spaces, where padding is specified (see width sub-specifier).

	width	description
	(number)	Minimum number of characters to be printed. If the value to be printed is shorter than this number, the result is padded with blank spaces. The value is not truncated even if the result is larger.
	*	The width is not specified in the format string, but as an additional integer value argument preceding the argument that has to be formatted.

	.precision	description
	.number	For integer specifiers (d, i, o, u, x, X): precision specifies the minimum number of digits to be written. If the value to be written is shorter than this number, the result is padded with leading zeros. The value is not truncated even if the result is longer. A precision of 0 means that no character is written for the value 0.
	For e, E and f specifiers: this is the number of digits to be printed after the decimal point.
	For g and G specifiers: This is the maximum number of significant digits to be printed.
	For s: this is the maximum number of characters to be printed. By default all characters are printed until the ending null character is encountered.
	For c type: it has no effect.
	When no precision is specified, the default is 1. If the period is specified without an explicit value for precision, 0 is assumed.
	.*	The precision is not specified in the format string, but as an additional integer value argument preceding the argument that has to be formatted.

	length	description
	h	The argument is interpreted as a short int or unsigned short int (only applies to integer specifiers: i, d, o, u, x and X).
	l	The argument is interpreted as a long int or unsigned long int for integer specifiers (i, d, o, u, x and X), and as a wide character or wide character string for specifiers c and s.
	L	The argument is interpreted as a long double (only applies to floating point specifiers: e, E, f, g and G).


</markdown>